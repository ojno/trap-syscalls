probe kprobe.statement(0xffffffff8135f190).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135f18d;from=mem:%p;to=reg:edx\n", (0 * 16 + register("rax") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135f1c7).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8135f1c3;from=mem:%p;to=reg:edx\n", (0 * 16 + register("rax") + 0 * 1 + -1)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135f223).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135f21f;from=mem:%p;to=reg:rdx\n", (0 * 16 + register("rax") + 0 * 1 + -7)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135f1f2).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135f1ef;from=mem:%p;to=reg:edx\n", (0 * 16 + register("rax") + 0 * 1 + -3)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8136046f).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8136046d;from=reg:al;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813604a3).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff813604a0;from=reg:ax;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813604d2).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813604d0;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81360503).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81360500;from=reg:rax;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81360805).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81360802;from=reg:r8b;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c5863).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c5860;from=mem:%p;to=reg:rbx\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c5867).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c5863;from=mem:%p;to=reg:r8\n", (0 * 16 + register("rdi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c586f).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c586b;from=mem:%p;to=reg:rdx\n", (0 * 16 + register("rdi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c5877).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c5873;from=mem:%p;to=reg:rbp\n", (0 * 16 + register("rdi") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c58e3).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c58e0;from=mem:%p;to=reg:rbx\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c5923).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff816c5920;from=mem:%p;to=reg:bx\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c5873).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c586f;from=mem:%p;to=reg:r10\n", (0 * 16 + register("rdi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c587b).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c5877;from=mem:%p;to=reg:r14\n", (0 * 16 + register("rdi") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c587f).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c587b;from=mem:%p;to=reg:r13\n", (0 * 16 + register("rdi") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c586b).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c5867;from=mem:%p;to=reg:r11\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c5944).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff816c5942;from=mem:%p;to=reg:bl\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c58ac).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c58a8;from=reg:r11;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c58b4).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c58b0;from=reg:r10;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c58b8).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c58b4;from=reg:rbp;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c58bc).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c58b8;from=reg:r14;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c58c0).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c58bc;from=reg:r13;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c592a).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff816c5927;from=reg:bx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c58a4).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c58a1;from=reg:rbx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c58eb).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c58e8;from=reg:rbx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c58b0).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c58ac;from=reg:rdx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c58a8).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c58a4;from=reg:r8;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c5946).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff816c5944;from=reg:bl;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816fc3f1).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff816fc3ee;from=mem:%p;to=reg:ebp\n", (0 * 16 + register("rbp") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816fc634).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff816fc631;from=mem:%p;to=reg:r9d\n", (0 * 16 + register("r8") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81d0a0f9).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81d0a0f6;from=mem:%p;to=reg:rcx\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816d71a2).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816d719f;from=mem:%p;to=reg:r12\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810089d4).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff810089d1;from=mem:%p;to=reg:r13\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8100b3a4).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8100b3a1;from=mem:%p;to=reg:r14\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8100b414).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8100b411;from=mem:%p;to=reg:r14\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8100bc52).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8100bc4e;from=mem:%p;to=reg:r14\n", (0 * 16 + register("rdx") + register("rbx") * 8 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8100c13f).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8100c13b;from=mem:%p;to=reg:rbx\n", (0 * 16 + register("rdx") + register("r13") * 8 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c9d5a).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816c9d57;from=mem:%p;to=reg:r14\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81014560).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81014558;from=reg:rax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 288)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81014887).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8101487f;from=reg:rax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 304)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81014f0d).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81014f06;from=mem:%p;to=reg:rdx\n", (0 * 16 + register("rbx") + 0 * 1 + 304)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81014fcd).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81014fc6;from=mem:%p;to=reg:rdx\n", (0 * 16 + register("rbx") + 0 * 1 + 288)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81016e7e).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff81016e7b;from=mem:%p;to=reg:cx\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8101e912).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8101e90e;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 108)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8101e923).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8101e91d;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 110)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8101ecb4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8101ecad;from=imm:0x46505845;to=mem:%p\n", (0 * 16 + register("rbx") + register("rcx") * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8101ecc2).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8101ecbc;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rbx") + 0 * 1 + 512)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8101ecd9).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8101ecd3;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 512)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8101f1c4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8101f1bf;from=mem:%p;to=reg:edx\n", (0 * 16 + register("r13") + register("rdx") * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81020290).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8102028d;from=reg:rax;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810203b4).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff810203b1;from=mem:%p;to=reg:rdx\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810204b7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810204b4;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81020ae4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81020ae1;from=mem:%p;to=reg:edx\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81022468).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81022465;from=reg:rdx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8102247a).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81022476;from=reg:rdx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8103fcfe).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8103fcfb;from=mem:%p;to=reg:r12\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8103fd01).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8103fcfe;from=reg:rdx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810528c2).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff810528bf;from=reg:rax;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810528dc).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810528d8;from=reg:r9d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810528ee).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff810528ea;from=reg:r9;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 88)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052905).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052901;from=reg:r9d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8105291b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052917;from=reg:r9d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8105292c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052929;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8105293e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8105293a;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052972).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8105296e;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052988).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81052984;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8105299d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8105299a;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 64)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810529b3).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810529b0;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 68)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810529c4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810529c1;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 72)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810529d5).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810529d2;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 76)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810529e6).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810529e3;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 80)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810529f7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810529f4;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 84)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052a08).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052a05;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 52)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052a1a).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81052a16;from=reg:rax;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052c63).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052c60;from=mem:%p;to=reg:r15d\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052c78).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052c75;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052c90).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052c8d;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052cb2).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81052cad;from=mem:%p;to=reg:rax\n", (0 * 16 + register("r12") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052d75).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052d73;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052d8e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052d8b;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052da4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052da1;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052dc0).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81052dbc;from=reg:rax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052e2a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052e27;from=mem:%p;to=reg:r8d\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052e42).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052e3f;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052e59).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052e56;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052e6b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052e67;from=mem:%p;to=reg:r9d\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052ee1).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052edf;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052ef9).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052ef6;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052f0a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052f07;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81052f1b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81052f18;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810539f9).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810539f6;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rbx") + 0 * 1 + 88)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81053a3e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81053a38;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rbx") + 0 * 1 + 720)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81053acd).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81053ac6;from=mem:%p;to=reg:rdx\n", (0 * 16 + register("rbx") + 0 * 1 + 252)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81053bd0).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81053bcc;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81053c15).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81053c0e;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 720)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81053e82).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81053e7b;from=reg:rax;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 252)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810682c1).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff810682bd;from=mem:%p;to=reg:rax\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810682dd).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff810682d8;from=mem:%p;to=reg:rcx\n", (0 * 16 + register("r12") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8106830e).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81068309;from=reg:rdx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81068739).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81068735;from=mem:%p;to=reg:edi\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8106874d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81068748;from=mem:%p;to=reg:r8d\n", (0 * 16 + register("r12") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8106877d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81068778;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8107085e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8107085c;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8107086e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8107086a;from=reg:r9d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070880).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8107087c;from=reg:r9d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810708d5).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff810708d1;from=reg:r8;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810708e6).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810708e2;from=reg:r9d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810708f7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810708f4;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070927).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81070924;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070933).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81070930;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8107095c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81070958;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070968).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81070965;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070985).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81070981;from=reg:r8;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070991).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8107098e;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810709df).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810709db;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810709f0).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810709ec;from=reg:r9d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070a05).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81070a01;from=reg:rsi;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070a1d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81070a19;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070a2e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81070a2a;from=reg:r9d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070a43).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81070a3f;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070a55).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81070a51;from=reg:r8;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070a65).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81070a61;from=reg:rdx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070a7d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81070a79;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070a8e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81070a8a;from=reg:r9d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070aa1).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81070a9d;from=reg:rdx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070abd).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81070ab9;from=reg:r9;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81070ade).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff81070ada;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810712cb).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff810712c8;from=mem:%p;to=reg:r12\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810712d6).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810712d3;from=mem:%p;to=reg:ebx\n", (0 * 16 + register("rdi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810712e0).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff810712dc;from=mem:%p;to=reg:rdi\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81071373).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81071370;from=reg:r10;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8107137f).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8107137b;from=reg:r11;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8107138b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81071387;from=reg:r9d;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81071471).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8107146e;from=reg:rax;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8107148f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8107148b;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810714a2).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8107149e;from=reg:r8;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810715f7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810715f3;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81071610).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8107160b;from=reg:esi;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81071623).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8107161e;from=reg:esi;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81071690).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8107168e;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810716ae).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810716aa;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810716c1).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810716bd;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810743ea).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff810743e6;from=reg:rax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810743f9).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff810743f3;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81074422).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8107441d;from=reg:rax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 9)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81074431).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8107442b;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 17)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81074462).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8107445d;from=reg:rax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 18)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81074471).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8107446b;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 26)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8107449d).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81074498;from=reg:rax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 27)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810744ac).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff810744a6;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 35)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810744e5).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff810744e0;from=reg:r10;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810744f1).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff810744eb;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810b94db).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810b94d9;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810b9754).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810b9752;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810b9775).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810b9773;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c737c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c737a;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7396).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7393;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c73ab).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c73a8;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c73c0).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c73bd;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c73d5).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c73d2;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c73e9).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c73e6;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c73fe).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c73fb;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7413).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7410;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7428).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7425;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c743d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c743a;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7457).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7454;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c746c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7469;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7481).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c747e;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7496).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7493;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 52)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c74aa).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c74a7;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c74bb).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c74b8;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 60)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c74cf).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c74cc;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 64)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c74e3).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c74e0;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 68)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c74f7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c74f4;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 72)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c750b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7508;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 76)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7523).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7520;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 80)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7577).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7575;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c758d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c758a;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c75e4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c75e2;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c75fb).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c75f8;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7657).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7655;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c766d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c766a;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c76c4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c76c2;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c76db).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c76d8;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7823).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7821;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c783b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7838;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7853).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7850;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c786b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7868;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7883).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7880;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c789b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7898;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c78af).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c78ac;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c78c7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c78c4;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c78df).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c78dc;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c78f7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c78f4;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7913).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7910;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c792b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7928;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7943).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7940;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c795b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7958;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 52)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7973).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7970;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7983).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7980;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 60)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c7997).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c7994;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 64)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c79ae).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c79ab;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 68)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c79c5).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c79c2;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 72)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c79de).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c79db;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 76)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c802e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c802c;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c803d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c803a;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c804c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c8049;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c8059).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c8056;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c80d9).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c80d7;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c80eb).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c80e8;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c80fd).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c80f9;from=mem:%p;to=reg:r9d\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c810d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c810a;from=mem:%p;to=reg:esi\n", (0 * 16 + register("rsi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c81ae).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c81ac;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c81bd).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c81ba;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c81cc).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c81c9;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c81d9).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c81d6;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c84cb).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c84c9;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c84e5).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c84e2;from=mem:%p;to=reg:esi\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c85f4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c85f0;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c860e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c8609;from=reg:esi;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c86ac).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c86aa;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c86c4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c86c1;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c871b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c8719;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c8735).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c8732;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c874a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c8747;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c875f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c875c;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c8774).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c8771;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c8789).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c8786;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c879e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c879b;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c87b3).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c87b0;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c87c8).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c87c5;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c87dd).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c87da;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c87f7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c87f4;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c880c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c8809;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c881d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c881a;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c882e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c882b;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 52)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c883f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c883c;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c8850).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c884d;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 60)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c8864).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c8861;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 64)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c8878).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c8875;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 68)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c90f1).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c90ef;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9105).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9102;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9115).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9112;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9125).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9122;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c92a6).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c92a4;from=mem:%p;to=reg:edx\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c93e8).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c93e6;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9a0c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9a0a;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9a28).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9a25;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9a3d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9a3a;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9a52).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9a4f;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9a67).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9a64;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9a7c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9a79;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9a91).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9a8e;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9aa6).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9aa3;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9ab7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9ab4;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9ac8).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9ac5;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9ae1).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff810c9add;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9af2).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9aef;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9b03).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9b00;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff810c9b13).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff810c9b10;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 52)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81134983).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81134981;from=mem:%p;to=reg:cl\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811349a6).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811349a4;from=mem:%p;to=reg:dl\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81134c45).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81134c42;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81134c6a).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81134c67;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811a339c).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811a3399;from=mem:%p;to=reg:r9b\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811a33c1).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811a33be;from=mem:%p;to=reg:dil\n", (0 * 16 + register("r8") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811a343b).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811a3437;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r8") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811a3467).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811a3464;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811a4fa3).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811a4fa0;from=mem:%p;to=reg:rdx\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811a867f).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811a867b;from=mem:%p;to=reg:rax\n", (0 * 16 + register("r12") + register("rdx") * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ad7cb).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811ad7c7;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("rdx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ad7e1).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811ad7de;from=reg:r8;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ad7f7).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811ad7ef;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ad806).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811ad801;from=reg:r15w;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ad814).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811ad810;from=reg:r9b;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 18)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ad844).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811ad83e;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r14") + register("r12") * 1 + 19)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ad9e5).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811ad9e2;from=reg:r8;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ad9f3).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811ad9ef;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ada02).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811ad9fd;from=reg:r15w;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ada33).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811ada2d;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("rbx") + register("r13") * 1 + 18)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811adabb).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811adab7;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("rdx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811adad1).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811adace;from=reg:r8;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811adae0).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811adadb;from=reg:r15w;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811adb13).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811adb0d;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r14") + register("r12") * 1 + 18)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811adb25).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811adb20;from=reg:r9b;to=mem:%p\n", (0 * 16 + register("r14") + register("rdx") * 1 + -1)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811addac).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811adda8;from=reg:rax;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811af3af).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811af3ac;from=mem:%p;to=reg:r11\n", (0 * 16 + register("r9") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811af3c5).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811af3c1;from=mem:%p;to=reg:rbx\n", (0 * 16 + register("r9") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811af60c).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811af607;from=reg:cx;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 6)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811b2965).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811b2962;from=mem:%p;to=reg:r11\n", (0 * 16 + register("r8") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811b3505).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811b3502;from=mem:%p;to=reg:r8\n", (0 * 16 + register("rax") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811b368d).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811b368a;from=mem:%p;to=reg:r8\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811b9e47).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811b9e45;from=mem:%p;to=reg:dl\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811c9750).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811c974d;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811c97fa).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811c97f7;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e2302).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e22ff;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e2318).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811e2314;from=reg:rax;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e4079).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e4077;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e408f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e408c;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e40a7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e40a4;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e40f3).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e40f0;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e4103).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e4100;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e411a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e4117;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e4131).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811e412d;from=reg:rsi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e4146).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811e4142;from=reg:rdx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 64)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e417f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e417c;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e418d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e418a;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e41af).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e41ac;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e41bf).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e41bc;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e41d7).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811e41d3;from=reg:rsi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e41eb).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e41e8;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e421d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e421a;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e422b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e4228;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e424d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e424a;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e425d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811e425a;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e4276).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811e4272;from=reg:rdi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 72)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e429a).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811e4296;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 80)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811e80e3).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811e80df;from=mem:%p;to=reg:r12\n", (0 * 16 + register("r14") + register("rdx") * 8 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb36a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb367;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb38a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb388;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb3af).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb3ad;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb3f5).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811eb3f2;from=mem:%p;to=reg:ax\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb40b).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811eb407;from=mem:%p;to=reg:cx\n", (0 * 16 + register("rsi") + 0 * 1 + 2)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb41c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb419;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb430).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb42d;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb444).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb441;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb498).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811eb495;from=reg:ax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb4af).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811eb4ab;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 2)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb4c0).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb4bd;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb4d1).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb4ce;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb4e1).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb4de;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb535).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811eb532;from=mem:%p;to=reg:ax\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb54b).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811eb547;from=mem:%p;to=reg:cx\n", (0 * 16 + register("rsi") + 0 * 1 + 2)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb55d).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811eb559;from=mem:%p;to=reg:rcx\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb56f).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811eb56b;from=mem:%p;to=reg:rcx\n", (0 * 16 + register("rsi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb580).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb57d;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb5d8).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811eb5d5;from=reg:ax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb5ef).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811eb5eb;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 2)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb601).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811eb5fd;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb613).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811eb60f;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb623).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb620;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb69f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb69b;from=mem:%p;to=reg:r9d\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb6cd).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb6ca;from=mem:%p;to=reg:r8d\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb6ec).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb6ea;from=mem:%p;to=reg:edx\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb82b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb829;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb845).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb842;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb85b).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811eb857;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb871).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811eb86d;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb887).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811eb883;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb89d).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811eb899;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb8b3).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811eb8af;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb8c4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb8c1;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb8d4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb8d1;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb8e4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb8e1;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 52)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb8fa).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb8f7;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 60)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb90b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb908;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 64)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eb9f4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eb9f2;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eba0b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eba07;from=reg:r12d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eba1c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eba19;from=reg:ebx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eba2e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eba2a;from=reg:r11d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eba40).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eba3c;from=reg:r10d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eba52).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eba4e;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eba60).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eba5c;from=reg:r9d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eba72).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eba6e;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eba84).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eba80;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eba94).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eba91;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebaa6).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ebaa3;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebab7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ebab4;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebb59).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ebb56;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebb6f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ebb6c;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebb7e).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811ebb79;from=reg:r14w;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebbb1).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811ebbab;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r15") + register("r12") * 1 + 10)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebbc3).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811ebbbe;from=reg:r9b;to=mem:%p\n", (0 * 16 + register("r15") + register("rdx") * 1 + -1)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebc6b).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811ebc67;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("rdx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebc81).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811ebc7e;from=reg:r8;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebc97).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811ebc8f;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebca6).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811ebca1;from=reg:r15w;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebcb4).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811ebcb0;from=reg:r9b;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 18)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebce4).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811ebcde;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r14") + register("r12") * 1 + 19)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebdb3).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ebdb1;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebdc0).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ebdbd;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebdcf).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811ebdca;from=reg:r15w;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ebdf9).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff811ebdf3;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("rbx") + register("r13") * 1 + 10)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ecb06).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ecb03;from=mem:%p;to=reg:r10d\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ecb7c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ecb79;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ed37c).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811ed378;from=reg:rax;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eddce).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eddcb;from=mem:%p;to=reg:r11d\n", (0 * 16 + register("r9") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811edde4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811edde0;from=mem:%p;to=reg:r9d\n", (0 * 16 + register("r9") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee4f3).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ee4ef;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee515).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ee511;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee525).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ee521;from=reg:esi;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee537).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ee533;from=reg:esi;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee549).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ee545;from=reg:esi;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee55b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ee557;from=reg:esi;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee56c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ee568;from=reg:esi;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee57b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ee577;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee874).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811ee86f;from=mem:%p;to=reg:ax\n", (0 * 16 + register("r13") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee887).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811ee883;from=reg:ax;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee8a3).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811ee89f;from=mem:%p;to=reg:rax\n", (0 * 16 + register("r13") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee8b5).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811ee8b1;from=reg:rax;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee8c4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811ee8c0;from=mem:%p;to=reg:eax\n", (0 * 16 + register("r13") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811ee8d5).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff811ee8d1;from=reg:rax;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eeadc).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eead7;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eeaf4).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811eeaee;from=reg:dx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eeb0a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eeb05;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 52)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eeb7a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eeb75;from=mem:%p;to=reg:edx\n", (0 * 16 + register("r12") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eeb90).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff811eeb8a;from=mem:%p;to=reg:dx\n", (0 * 16 + register("r12") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff811eeba7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff811eeba2;from=mem:%p;to=reg:edx\n", (0 * 16 + register("r12") + 0 * 1 + 52)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e0dbc).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816e0db7;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + -23)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e0dd9).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816e0dd4;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + -15)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e115e).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816e115a;from=reg:r15;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e11a3).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816e119f;from=reg:rbx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e11f1).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816e11ea;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e1234).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816e1231;from=reg:rbx;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e1274).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816e126d;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e168f).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816e168a;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + -21)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e16ac).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816e16a7;from=reg:rcx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + -13)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e1a0c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff816e1a09;from=reg:r13d;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e1a3c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff816e1a39;from=reg:ebx;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e1a80).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff816e1a79;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e1ac7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff816e1ac4;from=reg:ebx;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e1b03).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff816e1afc;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2300).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c22fe;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c230f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c230c;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c231b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2318;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c232a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2327;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c233d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c233a;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2351).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c234d;from=reg:ax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2366).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c2362;from=reg:ax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c237a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2377;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c238a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2386;from=reg:r10d;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c239b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2397;from=reg:r10d;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 52)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c23ac).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c23a8;from=reg:r10d;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 60)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c23bc).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c23b8;from=reg:r10d;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 64)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c23cd).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c23c9;from=reg:r10d;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 68)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c23de).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c23da;from=reg:r15d;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 72)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c23ea).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c23e7;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 76)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2481).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c247f;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c24a2).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c249e;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c24c3).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c24bf;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 6)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c24e1).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c24dd;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2504).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c2500;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 10)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2518).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c2514;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c252d).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c2529;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 14)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2540).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c253d;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2550).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c254d;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2560).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c255d;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2571).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c256d;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2582).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c257e;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 46)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2593).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c258e;from=reg:r15w;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c25a7).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c25a3;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 50)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c25b4).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c25b0;from=reg:di;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 52)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2719).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c2715;from=mem:%p;to=reg:cx\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c272e).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c272a;from=mem:%p;to=reg:si\n", (0 * 16 + register("rbx") + 0 * 1 + 6)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2741).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c273d;from=mem:%p;to=reg:si\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c284d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c284b;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2871).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c286d;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2895).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c2891;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 6)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c28b9).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c28b5;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c28db).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c28d7;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 10)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c28ed).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c28e9;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c28ff).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c28fa;from=reg:r8w;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 14)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2910).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c290c;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2921).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c291d;from=reg:r14d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2930).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c292b;from=reg:r14w;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2985).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2982;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2996).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2993;from=mem:%p;to=reg:esi\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c29a6).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c29a2;from=mem:%p;to=reg:si\n", (0 * 16 + register("rbx") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c29eb).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c29e9;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c29fd).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c29fa;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2a0f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2a0c;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2a21).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2a1e;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2a32).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2a2f;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2a44).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c2a40;from=reg:ax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2a54).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c2a50;from=reg:ax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2a64).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2a61;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2a74).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2a70;from=reg:r14d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2a82).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2a7e;from=reg:r14d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 52)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2d5e).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c2d5a;from=mem:%p;to=reg:dx\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2d73).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c2d6f;from=mem:%p;to=reg:dx\n", (0 * 16 + register("rbx") + 0 * 1 + 6)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2d88).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c2d84;from=mem:%p;to=reg:di\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2d9b).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c2d97;from=mem:%p;to=reg:di\n", (0 * 16 + register("rbx") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2ec1).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2ebe;from=mem:%p;to=reg:edx\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2ed2).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2ecf;from=mem:%p;to=reg:edx\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2ee4).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c2ee0;from=mem:%p;to=reg:di\n", (0 * 16 + register("rbx") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c2ef6).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c2ef3;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rbx") + 0 * 1 + 68)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c3050).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c304c;from=mem:%p;to=reg:cx\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c3065).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c3061;from=mem:%p;to=reg:si\n", (0 * 16 + register("rbx") + 0 * 1 + 6)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c3078).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c3074;from=mem:%p;to=reg:si\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c3170).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c316e;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c3193).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c318f;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c31b6).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c31b2;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 6)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c31d9).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c31d5;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c31fe).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c31fa;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 10)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c321d).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c3219;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c323c).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c3238;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 14)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c3255).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c3252;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c3268).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c3265;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c327a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c3277;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c328c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c3289;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c329f).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c329b;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c32b3).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c32ae;from=reg:r15w;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c32c5).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c32c0;from=reg:r15w;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 34)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c33b1).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c33af;from=reg:eax;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c33c3).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c33c0;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c33d7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c33d4;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c33eb).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c33e8;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c33fb).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c33f8;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c349e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c349c;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c34ad).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c34aa;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c34be).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c34bb;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c34cf).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c34cc;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c34e0).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c34dd;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c34ed).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c34ea;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c354a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c3548;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c355b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c3558;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c356c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c3569;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c357f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c357b;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c3599).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c3595;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c35bb).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c35b6;from=reg:r8w;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c35de).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c35d9;from=reg:r8w;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c35f9).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c35f5;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c360d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c3609;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c3621).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c361d;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c3635).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c3631;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c3649).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c3645;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 72)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c365d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c3659;from=reg:r15d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 64)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c366e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c366a;from=reg:r15d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 68)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c36d6).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c36d3;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c36e7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812c36e4;from=mem:%p;to=reg:esi\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812c36f7).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff812c36f3;from=mem:%p;to=reg:si\n", (0 * 16 + register("rbx") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812ccd04).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812ccd01;from=mem:%p;to=reg:edx\n", (0 * 16 + register("r15") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812ccd17).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812ccd13;from=mem:%p;to=reg:edx\n", (0 * 16 + register("r15") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812ccd2a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812ccd26;from=mem:%p;to=reg:edi\n", (0 * 16 + register("r15") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812ccd3b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812ccd37;from=mem:%p;to=reg:edi\n", (0 * 16 + register("r15") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812ccfa1).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812ccf9f;from=mem:%p;to=reg:edx\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812ccfb3).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812ccfb0;from=mem:%p;to=reg:edx\n", (0 * 16 + register("rbx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812ccfc5).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812ccfc2;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rbx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812ccfd5).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812ccfd2;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rbx") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812cd097).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812cd093;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812cd0a7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812cd0a3;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812cd0b7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812cd0b3;from=reg:edi;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff812cd0c5).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff812cd0c1;from=reg:edi;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81350e06).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81350e01;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813510f4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813510f2;from=mem:%p;to=reg:esi\n", (0 * 16 + register("rax") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351101).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813510fe;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rax") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351111).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135110e;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rax") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351121).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135111e;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rax") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351131).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135112e;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rax") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351142).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135113e;from=mem:%p;to=reg:dil\n", (0 * 16 + register("rax") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351154).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81351150;from=mem:%p;to=reg:dil\n", (0 * 16 + register("rax") + 0 * 1 + 21)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351166).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81351162;from=mem:%p;to=reg:dil\n", (0 * 16 + register("rax") + 0 * 1 + 22)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351178).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81351174;from=mem:%p;to=reg:dil\n", (0 * 16 + register("rax") + 0 * 1 + 23)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351187).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351184;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rax") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135127e).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135127a;from=mem:%p;to=reg:al\n", (0 * 16 + register("r13") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351293).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135128f;from=mem:%p;to=reg:eax\n", (0 * 16 + register("r13") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813512ac).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813512a8;from=mem:%p;to=reg:eax\n", (0 * 16 + register("r13") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813512c5).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813512c1;from=mem:%p;to=reg:eax\n", (0 * 16 + register("r13") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813512de).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813512da;from=mem:%p;to=reg:eax\n", (0 * 16 + register("r13") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813512f7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813512f3;from=mem:%p;to=reg:eax\n", (0 * 16 + register("r13") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351310).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135130c;from=mem:%p;to=reg:eax\n", (0 * 16 + register("r13") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351329).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81351325;from=mem:%p;to=reg:al\n", (0 * 16 + register("r13") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135133f).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135133b;from=mem:%p;to=reg:al\n", (0 * 16 + register("r13") + 0 * 1 + 29)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351355).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81351351;from=mem:%p;to=reg:al\n", (0 * 16 + register("r13") + 0 * 1 + 30)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135136b).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81351367;from=mem:%p;to=reg:al\n", (0 * 16 + register("r13") + 0 * 1 + 31)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351381).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135137d;from=mem:%p;to=reg:eax\n", (0 * 16 + register("r13") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135139a).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81351396;from=mem:%p;to=reg:al\n", (0 * 16 + register("r13") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813513c7).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813513c3;from=mem:%p;to=reg:al\n", (0 * 16 + register("r13") + 0 * 1 + 60)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813513d7).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813513d3;from=mem:%p;to=reg:al\n", (0 * 16 + register("r13") + 0 * 1 + 61)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813513f5).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff813513f1;from=mem:%p;to=reg:rax\n", (0 * 16 + register("r13") + 0 * 1 + 62)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351414).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81351410;from=mem:%p;to=reg:rax\n", (0 * 16 + register("r13") + 0 * 1 + 70)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351426).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351422;from=mem:%p;to=reg:edi\n", (0 * 16 + register("r13") + 0 * 1 + 80)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351433).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135142f;from=mem:%p;to=reg:edi\n", (0 * 16 + register("r13") + 0 * 1 + 84)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351538).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81351534;from=reg:al;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135154a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351545;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135155c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351557;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351571).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135156c;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351586).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351581;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135159b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351596;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813515b0).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813515ab;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813515c5).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813515c0;from=reg:al;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813515da).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813515d5;from=reg:al;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 29)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813515ef).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813515ea;from=reg:al;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 30)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351604).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813515ff;from=reg:al;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 31)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351619).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351614;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135162e).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81351629;from=reg:al;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135165e).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81351659;from=reg:al;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 60)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351670).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135166b;from=reg:al;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 61)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351693).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135168e;from=reg:rsi;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 62)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813516b2).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff813516ad;from=reg:rsi;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 70)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813516c5).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813516c0;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 80)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813516d4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813516cf;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 84)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135172c).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135172a;from=reg:cl;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135173c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351739;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135174f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135174c;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351762).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135175f;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351776).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff81351772;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135178a).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff81351786;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 18)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135179e).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8135179a;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813517b2).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff813517ae;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 22)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813517c4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813517c1;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813517d6).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813517d3;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813517e8).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813517e5;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813517fa).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813517f7;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135180d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135180a;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351820).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135181d;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 44)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351832).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135182f;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351856).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351854;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351865).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351862;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351877).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351874;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351889).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351886;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135189b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351898;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813518ae).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813518ab;from=reg:cl;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813518c1).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813518be;from=reg:cl;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 21)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813518d4).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813518d1;from=reg:cl;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 22)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813518e7).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813518e4;from=reg:cl;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 23)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813518fa).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813518f7;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351912).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351910;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351922).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135191f;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351934).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351931;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351947).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351944;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351959).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351956;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135196b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351968;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rax") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135198f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135198c;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135199f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8135199b;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813519af).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813519ab;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813519c0).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813519bc;from=reg:al;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813519d1).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813519cd;from=reg:al;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 13)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813519e2).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff813519de;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351a10).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351a0c;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351a21).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351a1d;from=reg:r9d;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81351a63).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81351a5f;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ebec).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135ebea;from=mem:%p;to=reg:al\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ebee).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135ebec;from=reg:al;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec14).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec11;from=reg:r8;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec05).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec02;from=mem:%p;to=reg:r8\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec09).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec05;from=mem:%p;to=reg:r9\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec0d).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec09;from=mem:%p;to=reg:r10\n", (0 * 16 + register("rsi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec11).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec0d;from=mem:%p;to=reg:r11\n", (0 * 16 + register("rsi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec18).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec14;from=reg:r9;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec1c).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec18;from=reg:r10;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec20).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec1c;from=reg:r11;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec24).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec20;from=mem:%p;to=reg:r8\n", (0 * 16 + register("rsi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec28).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec24;from=mem:%p;to=reg:r9\n", (0 * 16 + register("rsi") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec2c).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec28;from=mem:%p;to=reg:r10\n", (0 * 16 + register("rsi") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec30).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec2c;from=mem:%p;to=reg:r11\n", (0 * 16 + register("rsi") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec34).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec30;from=reg:r8;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec38).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec34;from=reg:r9;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec3c).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec38;from=reg:r10;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec40).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec3c;from=reg:r11;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec59).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec56;from=mem:%p;to=reg:r8\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec5c).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ec59;from=reg:r8;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec70).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135ec6e;from=mem:%p;to=reg:al\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ec72).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135ec70;from=reg:al;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ecac).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135ecaa;from=mem:%p;to=reg:al\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ecae).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135ecac;from=reg:al;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }



probe kprobe.statement(0xffffffff8135ed0c).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135ed0a;from=mem:%p;to=reg:al\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed0e).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135ed0c;from=reg:al;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed5e).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed59;from=reg:r9;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed29).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed25;from=mem:%p;to=reg:r9\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed25).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed22;from=mem:%p;to=reg:r8\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed31).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed2d;from=mem:%p;to=reg:r11\n", (0 * 16 + register("rsi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed35).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed31;from=reg:r8;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed3f).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed3a;from=reg:r10;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed44).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed3f;from=reg:r11;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed48).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed44;from=mem:%p;to=reg:r8\n", (0 * 16 + register("rsi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed50).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed4c;from=mem:%p;to=reg:r10\n", (0 * 16 + register("rsi") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed59).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed54;from=reg:r8;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed63).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed5e;from=reg:r10;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed68).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed63;from=reg:r11;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed2d).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed29;from=mem:%p;to=reg:r10\n", (0 * 16 + register("rsi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed3a).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed35;from=reg:r9;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed4c).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed48;from=mem:%p;to=reg:r9\n", (0 * 16 + register("rsi") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed54).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed50;from=mem:%p;to=reg:r11\n", (0 * 16 + register("rsi") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed81).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed7e;from=mem:%p;to=reg:r8\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed85).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8135ed81;from=reg:r8;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed99).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135ed97;from=mem:%p;to=reg:al\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8135ed9b).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8135ed99;from=reg:al;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813607f4).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff813607f1;from=reg:r8;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8136087e).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8136087b;from=reg:r8b;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81360897).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81360894;from=mem:%p;to=reg:r8b\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813608c5).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813608c2;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("rdi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff813629f8).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff813629f5;from=mem:%p;to=reg:r13b\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81362c38).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81362c36;from=mem:%p;to=reg:al\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81374c40).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81374c3c;from=mem:%p;to=reg:r9\n", (0 * 16 + register("rsi") + register("rax") * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81374cbc).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81374cb8;from=mem:%p;to=reg:r9b\n", (0 * 16 + register("rsi") + register("rax") * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81374d11).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81374d0e;from=mem:%p;to=reg:r9\n", (0 * 16 + register("rax") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81374d70).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81374d6b;from=mem:%p;to=reg:rsi\n", (0 * 16 + register("rax") + register("rdi") * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81374dfc).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81374df9;from=mem:%p;to=reg:r9\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81374e6a).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81374e66;from=mem:%p;to=reg:rdi\n", (0 * 16 + register("rdx") + register("rdi") * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8138dca7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8138dca5;from=mem:%p;to=reg:edx\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8138dd00).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8138dcfd;from=mem:%p;to=reg:dx\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8138dd86).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8138dd83;from=mem:%p;to=reg:dx\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8138ddc5).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8138ddc3;from=mem:%p;to=reg:dl\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8138ddfb).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8138ddf9;from=mem:%p;to=reg:dl\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8138df38).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8138df36;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8138df8e).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8138df8b;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8138e01c).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8138e019;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8138e056).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8138e054;from=reg:dl;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8138e093).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8138e091;from=reg:dl;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81406b35).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81406b32;from=mem:%p;to=reg:rsi\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8140a7f4).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8140a7f1;from=mem:%p;to=reg:rdx\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816e8ea9).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff816e8ea6;from=mem:%p;to=reg:r12\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814133cc).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff814133c9;from=mem:%p;to=reg:r12\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81413920).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8141391d;from=mem:%p;to=reg:r13\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8142cf41).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8142cf3d;from=mem:%p;to=reg:cx\n", (0 * 16 + register("r15") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8142cf4e).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8142cf49;from=mem:%p;to=reg:si\n", (0 * 16 + register("r15") + 0 * 1 + 2)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8142cf5b).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8142cf56;from=mem:%p;to=reg:di\n", (0 * 16 + register("r15") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8142cf6c).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8142cf67;from=mem:%p;to=reg:r14w\n", (0 * 16 + register("r15") + 0 * 1 + 6)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8142cf79).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8142cf74;from=mem:%p;to=reg:r8w\n", (0 * 16 + register("r15") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8142cf84).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8142cf7f;from=mem:%p;to=reg:di\n", (0 * 16 + register("r15") + 0 * 1 + 10)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8142ecc6).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8142ecc2;from=mem:%p;to=reg:r13w\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8142ecd3).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8142ecce;from=mem:%p;to=reg:cx\n", (0 * 16 + register("r14") + 0 * 1 + 2)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8142ece0).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8142ecdb;from=mem:%p;to=reg:si\n", (0 * 16 + register("r14") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8142ecf1).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8142ecec;from=mem:%p;to=reg:si\n", (0 * 16 + register("r14") + 0 * 1 + 6)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8142ed00).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff8142ecfb;from=mem:%p;to=reg:dx\n", (0 * 16 + register("r14") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814331cc).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff814331c8;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rdi") + register("rax") * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814333ae).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff814333aa;from=reg:r10w;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814333bb).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff814333b7;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 2)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8143341b).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff81433418;from=reg:dx;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81433a6d).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff81433a6a;from=mem:%p;to=reg:si\n", (0 * 16 + register("rax") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81433a7a).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff81433a76;from=mem:%p;to=reg:dx\n", (0 * 16 + register("rax") + 0 * 1 + 2)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81433c59).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff81433c55;from=mem:%p;to=reg:cx\n", (0 * 16 + register("rdi") + register("rax") * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81433cd8).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81433cd5;from=mem:%p;to=reg:dl\n", (0 * 16 + register("rbx") + register("rax") * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81433da6).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81433da2;from=reg:al;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81438338).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff81438334;from=reg:al;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81438483).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8143847f;from=reg:bl;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8143849f).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8143849b;from=reg:al;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8143c4d0).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff8143c4cd;from=mem:%p;to=reg:r13\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8144c495).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8144c492;from=mem:%p;to=reg:al\n", (0 * 16 + register("r8") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8144c545).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8144c542;from=reg:al;to=mem:%p\n", (0 * 16 + register("r8") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81484d8b).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff81484d88;from=mem:%p;to=reg:rdx\n", (0 * 16 + register("rdx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814a904c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff814a9048;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814a905d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff814a9058;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814c65be).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff814c65ba;from=mem:%p;to=reg:sil\n", (0 * 16 + register("r14") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814c8305).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff814c8302;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814c8692).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff814c868f;from=reg:edi;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814c86a4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff814c86a0;from=reg:edi;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814c86b6).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff814c86b2;from=reg:edi;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814c86c8).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff814c86c4;from=reg:edi;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814c86db).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff814c86d7;from=reg:edi;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814c86ef).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff814c86ea;from=reg:si;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814c8700).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff814c86fb;from=reg:cx;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 22)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814c8710).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff814c8708;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814c871e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff814c8716;from=imm:0x0;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff814c8ac7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff814c8ac0;from=imm:0xffffffff;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815198f8).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff815198f6;from=mem:%p;to=reg:al\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81519910).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff8151990d;from=mem:%p;to=reg:cl\n", (0 * 16 + register("rsi") + 0 * 1 + 1)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81519924).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81519921;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff81519938).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81519935;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8151994c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81519949;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8151995c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81519959;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8151996c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81519969;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8151997c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81519979;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8151998c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81519989;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 32)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8151999c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff81519999;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 36)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815199b1).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815199ae;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815199c4).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815199c1;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8151b38a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8151b388;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8151b39f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8151b39c;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff8151b3af).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff8151b3ac;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815c9c20).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815c9c1e;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cac71).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cac6d;from=mem:%p;to=reg:r13d\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815caca9).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff815caca5;from=reg:r13;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cad4d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cad4a;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cad5f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cad5c;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rbx") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cad71).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff815cad6d;from=mem:%p;to=reg:ax\n", (0 * 16 + register("rbx") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cad80).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff815cad7d;from=mem:%p;to=reg:al\n", (0 * 16 + register("rbx") + 0 * 1 + 26)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cad8e).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff815cad8b;from=mem:%p;to=reg:al\n", (0 * 16 + register("rbx") + 0 * 1 + 27)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cad9a).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff815cad97;from=mem:%p;to=reg:al\n", (0 * 16 + register("rbx") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cae54).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cae51;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cae64).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cae61;from=reg:ecx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cae75).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff815cae71;from=reg:cx;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cae85).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff815cae82;from=reg:cl;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 26)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cae97).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff815cae93;from=reg:r9b;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 27)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815caea6).absolute { if (pid() == target()) { printf("=== MOV size=1;addr=0xffffffff815caea2;from=reg:r9b;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cb085).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cb083;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cb13f).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff815cb13b;from=reg:rdx;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 40)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cb15d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cb159;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cb945).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff815cb93f;from=mem:%p;to=reg:cx\n", (0 * 16 + register("r12") + 0 * 1 + 52)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cb95b).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff815cb955;from=mem:%p;to=reg:cx\n", (0 * 16 + register("r12") + 0 * 1 + 64)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cb970).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cb96b;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("r12") + 0 * 1 + 72)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cb986).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cb981;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("r12") + 0 * 1 + 76)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cb99d).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff815cb997;from=mem:%p;to=reg:si\n", (0 * 16 + register("r12") + 0 * 1 + 80)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cb9af).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cb9aa;from=mem:%p;to=reg:esi\n", (0 * 16 + register("r12") + 0 * 1 + 68)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cbab6).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cbab1;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("r12") + 0 * 1 + 48)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cbac8).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff815cbac2;from=mem:%p;to=reg:cx\n", (0 * 16 + register("r12") + 0 * 1 + 52)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cbadb).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff815cbad5;from=mem:%p;to=reg:cx\n", (0 * 16 + register("r12") + 0 * 1 + 54)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cbaec).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cbae7;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("r12") + 0 * 1 + 56)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cbafc).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cbaf7;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("r12") + 0 * 1 + 60)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cbb0f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cbb0a;from=mem:%p;to=reg:r11d\n", (0 * 16 + register("r12") + 0 * 1 + 64)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cbb1e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cbb19;from=mem:%p;to=reg:r11d\n", (0 * 16 + register("r12") + 0 * 1 + 68)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cd172).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cd16e;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r15") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815cd46f).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815cd46c;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 28)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fe7d5).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fe7d3;from=mem:%p;to=reg:edx\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fe7eb).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fe7e9;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fe8a7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fe8a4;from=mem:%p;to=reg:r10d\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fe8c2).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fe8bb;from=mem:%p;to=reg:r11d\n", (0 * 16 + register("rbx") + 0 * 1 + 132)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fe8d7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fe8d0;from=mem:%p;to=reg:r9d\n", (0 * 16 + register("rbx") + 0 * 1 + 136)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fe95e).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fe95b;from=reg:r10d;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fe976).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fe96f;from=reg:r11d;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 136)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fe98b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fe984;from=reg:r9d;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 140)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fea30).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fea2e;from=mem:%p;to=reg:edx\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fea46).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fea44;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815feb03).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815feb01;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815feb1c).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815feb19;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rcx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815febc5).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815febc2;from=mem:%p;to=reg:edi\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fec0b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fec07;from=reg:edi;to=mem:%p\n", (0 * 16 + register("r13") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fec63).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fec61;from=mem:%p;to=reg:eax\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fec77).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fec71;from=mem:%p;to=reg:edx\n", (0 * 16 + register("rbx") + 0 * 1 + 132)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fec8b).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fec85;from=mem:%p;to=reg:edi\n", (0 * 16 + register("rbx") + 0 * 1 + 136)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fec9d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fec99;from=reg:eax;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fecb5).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fecad;from=reg:edx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 136)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fecd0).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fecc8;from=reg:edi;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 140)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fed4a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fed46;from=mem:%p;to=reg:esi\n", (0 * 16 + register("r13") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fed80).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fed7d;from=reg:edi;to=mem:%p\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fedd5).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fedd1;from=mem:%p;to=reg:edi\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fedeb).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fede3;from=mem:%p;to=reg:r8d\n", (0 * 16 + register("r12") + 0 * 1 + 136)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fee01).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fedf9;from=mem:%p;to=reg:esi\n", (0 * 16 + register("r12") + 0 * 1 + 140)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fee11).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fee0f;from=reg:edi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fee22).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fee1b;from=reg:r8d;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 132)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fee32).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fee2c;from=reg:esi;to=mem:%p\n", (0 * 16 + register("rbx") + 0 * 1 + 136)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fef50).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff815fef4c;from=mem:%p;to=reg:si\n", (0 * 16 + register("r14") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fef63).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815fef5f;from=mem:%p;to=reg:edi\n", (0 * 16 + register("r14") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fef70).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff815fef6d;from=reg:si;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815fef80).absolute { if (pid() == target()) { printf("=== MOV size=8;addr=0xffffffff815fef7c;from=reg:rdi;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815ff0b7).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815ff0b5;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815ff0ca).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815ff0c7;from=reg:edx;to=mem:%p\n", (0 * 16 + register("rcx") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815ff3a9).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815ff3a6;from=mem:%p;to=reg:r8d\n", (0 * 16 + register("rsi") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815ff3bb).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815ff3b8;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815ff3cc).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815ff3c8;from=mem:%p;to=reg:r9d\n", (0 * 16 + register("rsi") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815ff3d9).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815ff3d6;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 12)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815ff3ed).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815ff3e9;from=mem:%p;to=reg:r10d\n", (0 * 16 + register("rsi") + 0 * 1 + 16)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815ff3fa).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815ff3f7;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 20)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815ff40d).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815ff40a;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("rsi") + 0 * 1 + 24)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815ff66a).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815ff666;from=mem:%p;to=reg:ecx\n", (0 * 16 + register("r13") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815ff6ba).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815ff6b6;from=mem:%p;to=reg:esi\n", (0 * 16 + register("r13") + 0 * 1 + 4)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff815ff6d0).absolute { if (pid() == target()) { printf("=== MOV size=4;addr=0xffffffff815ff6cc;from=mem:%p;to=reg:esi\n", (0 * 16 + register("r13") + 0 * 1 + 8)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c570f).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff816c570a;from=reg:dx;to=mem:%p\n", (0 * 16 + register("r12") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.statement(0xffffffff816c57cc).absolute { if (pid() == target()) { printf("=== MOV size=2;addr=0xffffffff816c57c7;from=mem:%p;to=reg:dx\n", (0 * 16 + register("r13") + 0 * 1 + 0)); print_backtrace(); print_ubacktrace(); } }
probe kprobe.function("copy_user_enhanced_fast_string") {
	 if (pid() == target()) {
		  printf("=== extent copy_user_enhanced_fast_string @ %p to=%p from=%p n=%p\n",
				 addr(),
				 register("rdi"),
				 register("rsi"),
				 register("rdx")
			   );
		  print_backtrace(); print_ubacktrace();
	 }

}
probe kprobe.function("copy_user_generic_string") {
	 if (pid() == target()) {
		  printf("=== extent copy_user_generic_string @ %p to=%p from=%p n=%p\n",
				 addr(),
				 register("rdi"),
				 register("rsi"),
				 register("rdx")
			   );
		  
		  print_backtrace(); print_ubacktrace();
	 }
}
probe kprobe.function("copy_user_generic_unrolled") {
	 if (pid() == target()) {
		  printf("=== extent copy_user_generic_unrolled @ %p to=%p from=%p n=%p\n",
				 addr(),
				 register("rdi"),
				 register("rsi"),
				 register("rdx")
			   );
		  
		  print_backtrace(); print_ubacktrace();
	 }

}
global syscall_nums;

probe begin {
	 syscall_nums[0] = "read";
	 syscall_nums[1] = "write";
	 syscall_nums[2] = "open";
	 syscall_nums[3] = "close";
	 syscall_nums[4] = "stat";
	 syscall_nums[5] = "fstat";
	 syscall_nums[6] = "lstat";
	 syscall_nums[7] = "poll";
	 syscall_nums[8] = "lseek";
	 syscall_nums[9] = "mmap";
	 syscall_nums[10] = "mprotect";
	 syscall_nums[11] = "munmap";
	 syscall_nums[12] = "brk";
	 syscall_nums[13] = "rt_sigaction";
	 syscall_nums[14] = "rt_sigprocmask";
	 syscall_nums[15] = "rt_sigreturn";
	 syscall_nums[16] = "ioctl";
	 syscall_nums[17] = "pread64";
	 syscall_nums[18] = "pwrite64";
	 syscall_nums[19] = "readv";
	 syscall_nums[20] = "writev";
	 syscall_nums[21] = "access";
	 syscall_nums[22] = "pipe";
	 syscall_nums[23] = "select";
	 syscall_nums[24] = "sched_yield";
	 syscall_nums[25] = "mremap";
	 syscall_nums[26] = "msync";
	 syscall_nums[27] = "mincore";
	 syscall_nums[28] = "madvise";
	 syscall_nums[29] = "shmget";
	 syscall_nums[30] = "shmat";
	 syscall_nums[31] = "shmctl";
	 syscall_nums[32] = "dup";
	 syscall_nums[33] = "dup2";
	 syscall_nums[34] = "pause";
	 syscall_nums[35] = "nanosleep";
	 syscall_nums[36] = "getitimer";
	 syscall_nums[37] = "alarm";
	 syscall_nums[38] = "setitimer";
	 syscall_nums[39] = "getpid";
	 syscall_nums[40] = "sendfile";
	 syscall_nums[41] = "socket";
	 syscall_nums[42] = "connect";
	 syscall_nums[43] = "accept";
	 syscall_nums[44] = "sendto";
	 syscall_nums[45] = "recvfrom";
	 syscall_nums[46] = "sendmsg";
	 syscall_nums[47] = "recvmsg";
	 syscall_nums[48] = "shutdown";
	 syscall_nums[49] = "bind";
	 syscall_nums[50] = "listen";
	 syscall_nums[51] = "getsockname";
	 syscall_nums[52] = "getpeername";
	 syscall_nums[53] = "socketpair";
	 syscall_nums[54] = "setsockopt";
	 syscall_nums[55] = "getsockopt";
	 syscall_nums[56] = "clone";
	 syscall_nums[57] = "fork";
	 syscall_nums[58] = "vfork";
	 syscall_nums[59] = "execve";
	 syscall_nums[60] = "exit";
	 syscall_nums[61] = "wait4";
	 syscall_nums[62] = "kill";
	 syscall_nums[63] = "uname";
	 syscall_nums[64] = "semget";
	 syscall_nums[65] = "semop";
	 syscall_nums[66] = "semctl";
	 syscall_nums[67] = "shmdt";
	 syscall_nums[68] = "msgget";
	 syscall_nums[69] = "msgsnd";
	 syscall_nums[70] = "msgrcv";
	 syscall_nums[71] = "msgctl";
	 syscall_nums[72] = "fcntl";
	 syscall_nums[73] = "flock";
	 syscall_nums[74] = "fsync";
	 syscall_nums[75] = "fdatasync";
	 syscall_nums[76] = "truncate";
	 syscall_nums[77] = "ftruncate";
	 syscall_nums[78] = "getdents";
	 syscall_nums[79] = "getcwd";
	 syscall_nums[80] = "chdir";
	 syscall_nums[81] = "fchdir";
	 syscall_nums[82] = "rename";
	 syscall_nums[83] = "mkdir";
	 syscall_nums[84] = "rmdir";
	 syscall_nums[85] = "creat";
	 syscall_nums[86] = "link";
	 syscall_nums[87] = "unlink";
	 syscall_nums[88] = "symlink";
	 syscall_nums[89] = "readlink";
	 syscall_nums[90] = "chmod";
	 syscall_nums[91] = "fchmod";
	 syscall_nums[92] = "chown";
	 syscall_nums[93] = "fchown";
	 syscall_nums[94] = "lchown";
	 syscall_nums[95] = "umask";
	 syscall_nums[96] = "gettimeofday";
	 syscall_nums[97] = "getrlimit";
	 syscall_nums[98] = "getrusage";
	 syscall_nums[99] = "sysinfo";
	 syscall_nums[100] = "times";
	 syscall_nums[101] = "ptrace";
	 syscall_nums[102] = "getuid";
	 syscall_nums[103] = "syslog";
	 syscall_nums[104] = "getgid";
	 syscall_nums[105] = "setuid";
	 syscall_nums[106] = "setgid";
	 syscall_nums[107] = "geteuid";
	 syscall_nums[108] = "getegid";
	 syscall_nums[109] = "setpgid";
	 syscall_nums[110] = "getppid";
	 syscall_nums[111] = "getpgrp";
	 syscall_nums[112] = "setsid";
	 syscall_nums[113] = "setreuid";
	 syscall_nums[114] = "setregid";
	 syscall_nums[115] = "getgroups";
	 syscall_nums[116] = "setgroups";
	 syscall_nums[117] = "setresuid";
	 syscall_nums[118] = "getresuid";
	 syscall_nums[119] = "setresgid";
	 syscall_nums[120] = "getresgid";
	 syscall_nums[121] = "getpgid";
	 syscall_nums[122] = "setfsuid";
	 syscall_nums[123] = "setfsgid";
	 syscall_nums[124] = "getsid";
	 syscall_nums[125] = "capget";
	 syscall_nums[126] = "capset";
	 syscall_nums[127] = "rt_sigpending";
	 syscall_nums[128] = "rt_sigtimedwait";
	 syscall_nums[129] = "rt_sigqueueinfo";
	 syscall_nums[130] = "rt_sigsuspend";
	 syscall_nums[131] = "sigaltstack";
	 syscall_nums[132] = "utime";
	 syscall_nums[133] = "mknod";
	 syscall_nums[134] = "uselib";
	 syscall_nums[135] = "personality";
	 syscall_nums[136] = "ustat";
	 syscall_nums[137] = "statfs";
	 syscall_nums[138] = "fstatfs";
	 syscall_nums[139] = "sysfs";
	 syscall_nums[140] = "getpriority";
	 syscall_nums[141] = "setpriority";
	 syscall_nums[142] = "sched_setparam";
	 syscall_nums[143] = "sched_getparam";
	 syscall_nums[144] = "sched_setscheduler";
	 syscall_nums[145] = "sched_getscheduler";
	 syscall_nums[146] = "sched_get_priority_max";
	 syscall_nums[147] = "sched_get_priority_min";
	 syscall_nums[148] = "sched_rr_get_interval";
	 syscall_nums[149] = "mlock";
	 syscall_nums[150] = "munlock";
	 syscall_nums[151] = "mlockall";
	 syscall_nums[152] = "munlockall";
	 syscall_nums[153] = "vhangup";
	 syscall_nums[154] = "modify_ldt";
	 syscall_nums[155] = "pivot_root";
	 syscall_nums[156] = "_sysctl";
	 syscall_nums[157] = "prctl";
	 syscall_nums[158] = "arch_prctl";
	 syscall_nums[159] = "adjtimex";
	 syscall_nums[160] = "setrlimit";
	 syscall_nums[161] = "chroot";
	 syscall_nums[162] = "sync";
	 syscall_nums[163] = "acct";
	 syscall_nums[164] = "settimeofday";
	 syscall_nums[165] = "mount";
	 syscall_nums[166] = "umount2";
	 syscall_nums[167] = "swapon";
	 syscall_nums[168] = "swapoff";
	 syscall_nums[169] = "reboot";
	 syscall_nums[170] = "sethostname";
	 syscall_nums[171] = "setdomainname";
	 syscall_nums[172] = "iopl";
	 syscall_nums[173] = "ioperm";
	 syscall_nums[174] = "create_module";
	 syscall_nums[175] = "init_module";
	 syscall_nums[176] = "delete_module";
	 syscall_nums[177] = "get_kernel_syms";
	 syscall_nums[178] = "query_module";
	 syscall_nums[179] = "quotactl";
	 syscall_nums[180] = "nfsservctl";
	 syscall_nums[181] = "getpmsg";
	 syscall_nums[182] = "putpmsg";
	 syscall_nums[183] = "afs_syscall";
	 syscall_nums[184] = "tuxcall";
	 syscall_nums[185] = "security";
	 syscall_nums[186] = "gettid";
	 syscall_nums[187] = "readahead";
	 syscall_nums[188] = "setxattr";
	 syscall_nums[189] = "lsetxattr";
	 syscall_nums[190] = "fsetxattr";
	 syscall_nums[191] = "getxattr";
	 syscall_nums[192] = "lgetxattr";
	 syscall_nums[193] = "fgetxattr";
	 syscall_nums[194] = "listxattr";
	 syscall_nums[195] = "llistxattr";
	 syscall_nums[196] = "flistxattr";
	 syscall_nums[197] = "removexattr";
	 syscall_nums[198] = "lremovexattr";
	 syscall_nums[199] = "fremovexattr";
	 syscall_nums[200] = "tkill";
	 syscall_nums[201] = "time";
	 syscall_nums[202] = "futex";
	 syscall_nums[203] = "sched_setaffinity";
	 syscall_nums[204] = "sched_getaffinity";
	 syscall_nums[205] = "set_thread_area";
	 syscall_nums[206] = "io_setup";
	 syscall_nums[207] = "io_destroy";
	 syscall_nums[208] = "io_getevents";
	 syscall_nums[209] = "io_submit";
	 syscall_nums[210] = "io_cancel";
	 syscall_nums[211] = "get_thread_area";
	 syscall_nums[212] = "lookup_dcookie";
	 syscall_nums[213] = "epoll_create";
	 syscall_nums[214] = "epoll_ctl_old";
	 syscall_nums[215] = "epoll_wait_old";
	 syscall_nums[216] = "remap_file_pages";
	 syscall_nums[217] = "getdents64";
	 syscall_nums[218] = "set_tid_address";
	 syscall_nums[219] = "restart_syscall";
	 syscall_nums[220] = "semtimedop";
	 syscall_nums[221] = "fadvise64";
	 syscall_nums[222] = "timer_create";
	 syscall_nums[223] = "timer_settime";
	 syscall_nums[224] = "timer_gettime";
	 syscall_nums[225] = "timer_getoverrun";
	 syscall_nums[226] = "timer_delete";
	 syscall_nums[227] = "clock_settime";
	 syscall_nums[228] = "clock_gettime";
	 syscall_nums[229] = "clock_getres";
	 syscall_nums[230] = "clock_nanosleep";
	 syscall_nums[231] = "exit_group";
	 syscall_nums[232] = "epoll_wait";
	 syscall_nums[233] = "epoll_ctl";
	 syscall_nums[234] = "tgkill";
	 syscall_nums[235] = "utimes";
	 syscall_nums[236] = "vserver";
	 syscall_nums[237] = "mbind";
	 syscall_nums[238] = "set_mempolicy";
	 syscall_nums[239] = "get_mempolicy";
	 syscall_nums[240] = "mq_open";
	 syscall_nums[241] = "mq_unlink";
	 syscall_nums[242] = "mq_timedsend";
	 syscall_nums[243] = "mq_timedreceive";
	 syscall_nums[244] = "mq_notify";
	 syscall_nums[245] = "mq_getsetattr";
	 syscall_nums[246] = "kexec_load";
	 syscall_nums[247] = "waitid";
	 syscall_nums[248] = "add_key";
	 syscall_nums[249] = "request_key";
	 syscall_nums[250] = "keyctl";
	 syscall_nums[251] = "ioprio_set";
	 syscall_nums[252] = "ioprio_get";
	 syscall_nums[253] = "inotify_init";
	 syscall_nums[254] = "inotify_add_watch";
	 syscall_nums[255] = "inotify_rm_watch";
	 syscall_nums[256] = "migrate_pages";
	 syscall_nums[257] = "openat";
	 syscall_nums[258] = "mkdirat";
	 syscall_nums[259] = "mknodat";
	 syscall_nums[260] = "fchownat";
	 syscall_nums[261] = "futimesat";
	 syscall_nums[262] = "newfstatat";
	 syscall_nums[263] = "unlinkat";
	 syscall_nums[264] = "renameat";
	 syscall_nums[265] = "linkat";
	 syscall_nums[266] = "symlinkat";
	 syscall_nums[267] = "readlinkat";
	 syscall_nums[268] = "fchmodat";
	 syscall_nums[269] = "faccessat";
	 syscall_nums[270] = "pselect6";
	 syscall_nums[271] = "ppoll";
	 syscall_nums[272] = "unshare";
	 syscall_nums[273] = "set_robust_list";
	 syscall_nums[274] = "get_robust_list";
	 syscall_nums[275] = "splice";
	 syscall_nums[276] = "tee";
	 syscall_nums[277] = "sync_file_range";
	 syscall_nums[278] = "vmsplice";
	 syscall_nums[279] = "move_pages";
	 syscall_nums[280] = "utimensat";
	 syscall_nums[281] = "epoll_pwait";
	 syscall_nums[282] = "signalfd";
	 syscall_nums[283] = "timerfd_create";
	 syscall_nums[284] = "eventfd";
	 syscall_nums[285] = "fallocate";
	 syscall_nums[286] = "timerfd_settime";
	 syscall_nums[287] = "timerfd_gettime";
	 syscall_nums[288] = "accept4";
	 syscall_nums[289] = "signalfd4";
	 syscall_nums[290] = "eventfd2";
	 syscall_nums[291] = "epoll_create1";
	 syscall_nums[292] = "dup3";
	 syscall_nums[293] = "pipe2";
	 syscall_nums[294] = "inotify_init1";
	 syscall_nums[295] = "preadv";
	 syscall_nums[296] = "pwritev";
	 syscall_nums[297] = "rt_tgsigqueueinfo";
	 syscall_nums[298] = "perf_event_open";
	 syscall_nums[299] = "recvmmsg";
	 syscall_nums[300] = "fanotify_init";
	 syscall_nums[301] = "fanotify_mark";
	 syscall_nums[302] = "prlimit64";
	 syscall_nums[303] = "name_to_handle_at";
	 syscall_nums[304] = "open_by_handle_at";
	 syscall_nums[305] = "clock_adjtime";
	 syscall_nums[306] = "syncfs";
	 syscall_nums[307] = "sendmmsg";
	 syscall_nums[308] = "setns";
	 syscall_nums[309] = "getcpu";
	 syscall_nums[310] = "process_vm_readv";
	 syscall_nums[311] = "process_vm_writev";
	 syscall_nums[312] = "kcmp";
	 syscall_nums[313] = "finit_module";
	 syscall_nums[314] = "sched_setattr";
	 syscall_nums[315] = "sched_getattr";
	 syscall_nums[316] = "renameat2";
	 syscall_nums[317] = "seccomp";
	 syscall_nums[318] = "getrandom";
	 syscall_nums[319] = "memfd_create";
	 syscall_nums[320] = "kexec_file_load";
	 syscall_nums[321] = "bpf";
	 syscall_nums[322] = "execveat";
}

probe process.syscall {
	 printf("=== syscall %s @ %p (%p, %p, %p, %p, %p, %p)\n", syscall_nums[$syscall], addr(), $arg1, $arg2, $arg3, $arg4, $arg5, $arg6);

	 print_backtrace(); print_ubacktrace();
}
